import streamlit as st
import duckdb as db
import pandas as pd # Import pandas to handle DataFrames

if con:
    st.subheader("‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á (‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß)")
    try:
        all_data = con.execute("SELECT * FROM comment_data LIMIT 10;").fetchdf()
        st.write(all_data)
    except db.Error as e:
        st.error(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á comment_data ‡πÑ‡∏î‡πâ: {e}")
        
st.title("üß† Comment Classification")

# --- Sub-topic Navigation ---
option = st.radio("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏¢‡πà‡∏≠‡∏¢", ["üîç Preview Comments", "üß™ ML Modeling"])

# Establish connection to DuckDB
# Make sure 'comment.duckdb' exists and is in the same directory as your Streamlit app
con = None # Initialize connection to None
try:
    con = db.connect('comment.duckdb')
except Exception as e:
    st.error(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ: {e}")
    st.info("‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏ü‡∏•‡πå 'comment.duckdb' ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡πÄ‡∏™‡∏µ‡∏¢‡∏´‡∏≤‡∏¢")

# --- Section 1: Preview Comments ---
if option == "üîç Preview Comments":
    st.subheader("üîç ‡∏î‡∏π‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå")
    st.write("‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå top 5 ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏´‡∏°‡∏ß‡∏î")

    if con: # Only proceed if connection is successful
        st.markdown("---")
        comment_type = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏£‡∏ñ", ["BYD Atto3", "BYD Seal", "BYD Dolphin"])
        car_video_mapping = {
            "BYD Atto3": "OMV9F9zB4KU",
            "BYD Seal": "87lJCDADWCo",
            "BYD Dolphin": "CbkX7H-0BIU"
        }
        selected_video_id = car_video_mapping[comment_type]
        st.markdown("---")

        # Function to execute query and display results or a message
        def display_comments(title, keywords, video_id, connection):
            st.write(f"**‡∏´‡∏°‡∏ß‡∏î {title}**")
            query = f"""
            SELECT DISTINCT comment
            FROM comment_data
            WHERE video_id = '{video_id}'
            AND ({' OR '.join([f"comment LIKE '%{k}%'" for k in keywords])})
            ORDER BY RANDOM() -- Orders randomly to get different top 5 each time if no specific ranking
            LIMIT 5;
            """
            try:
                df = connection.execute(query).fetchdf()
                if not df.empty:
                    st.dataframe(df, hide_index=True) # Using st.dataframe for better display
                else:
                    st.info(f"üö´ ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå‡πÉ‡∏ô‡∏´‡∏°‡∏ß‡∏î '{title}' ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {comment_type}")
            except db.Error as e:
                st.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏°‡∏ß‡∏î '{title}': {e}")
                st.warning(f"‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ï‡∏≤‡∏£‡∏≤‡∏á 'comment_data' ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á‡πÅ‡∏•‡∏∞‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {comment_type} ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà")
            st.markdown("---")

        # Define keywords for each category
        price_keywords = ['‡∏£‡∏≤‡∏Ñ‡∏≤', '‡∏ã‡∏∑‡πâ‡∏≠', '‡∏Ç‡∏≤‡∏¢', '‡∏ñ‡∏π‡∏Å', '‡πÅ‡∏û‡∏á']
        efficient_keywords = ['‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û', '‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà', '‡∏û‡∏•‡∏±‡∏á‡∏á‡∏≤‡∏ô', '‡∏ñ‡∏µ‡πà', '‡∏ó‡∏ô']
        tech_keywords = ['‡∏õ‡∏•‡∏≠‡∏î', '‡∏£‡∏∞‡∏ö‡∏ö', '‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô', '‡∏ä‡∏≤‡∏£‡πå‡∏à', '‡πÅ‡∏ö‡∏ï']
        design_keywords = ['‡∏™‡∏ß‡∏¢', '‡∏™‡∏µ', '‡∏Ç‡πâ‡∏≤‡∏á‡πÉ‡∏ô', '‡∏´‡∏ô‡πâ‡∏≤', '‡∏î‡∏µ‡πÑ‡∏ã‡∏ô‡πå']

        # Display comments for each category
        display_comments("‡∏£‡∏≤‡∏Ñ‡∏≤", price_keywords, selected_video_id, con)
        display_comments("‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û", efficient_keywords, selected_video_id, con)
        display_comments("‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ", tech_keywords, selected_video_id, con)
        display_comments("‡∏£‡∏π‡∏õ‡∏£‡πà‡∏≤‡∏á", design_keywords, selected_video_id, con)

# --- Section 2: ML Modeling ---
elif option == "üß™ ML Modeling":
    st.subheader("üß™ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏• Machine Learning")
    # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å model (Random Forest, Neural Network, etc.)
    model_type = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•", ["Random Forest", "Neural Network"])
    st.write(f"‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•: {model_type}")

