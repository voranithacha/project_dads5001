import streamlit as st
import duckdb as db


st.title("üß† Comment Classification")

# --- Sub-topic Navigation ---
option = st.radio("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏¢‡πà‡∏≠‡∏¢", ["üîç Preview Comments", "üß™ ML Modeling"])

# --- Section 1 ---
if option == "üîç Preview Comments":
    st.subheader("üîç ‡∏î‡∏π‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå")
    st.write("‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå top 5 ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏´‡∏°‡∏ß‡∏î")

    con = db.connect('./comment.duckdb')
    con.execute("CREATE OR REPLACE TABLE yt_comment_full AS SELECT * FROM read_csv_auto('./data/youtube_comments_full.csv')")

    # comment Top5 (liked)
    st.write("Top 5 comments with Most Liked")
    top_like = con.execute("SELECT comment_text_original as comment, like_count FROM yt_comment_full order by like_count desc limit 5;")
    st.write(top_like)
    # comment Top5 (replied)
    st.write("Top 5 comments with Most Replied Comments")
    top_reply = con.execute("SELECT comment_text_original as comment, reply_count FROM yt_comment_full order by reply_count desc limit 5;")
    st.write(top_reply)
    # Top 5 user ‡∏ó‡∏µ‡πà comment ‡πÄ‡∏¢‡∏≠‡∏∞‡∏™‡∏∏‡∏î(comment ‡∏´‡∏•‡∏≤‡∏¢ comment) 
    st.write("Top 5 Users with the Most Comments")
    top_like = con.execute("SELECT author_display_name, count(1) as total_comment FROM yt_comment_full group by author_display_name order by count(1) desc limit 5;")
    st.write(top_like)
    # Top 5 comment ‡∏ó‡∏µ‡πà‡∏¢‡∏≤‡∏ß‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
    st.write("Top 5 long Comments")
    top_like = con.execute("SELECT comment_text_original as comment, length(comment_text_original) as length_comment FROM yt_comment_full order by length(comment_text_original) desc limit 5;")
    st.write(top_like)
    # count comment ‡πÄ‡πÄ‡∏ö‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
    st.write("Total comment of each year")
    top_like = con.execute("SELECT strftime('%Y-%m', CAST(published_at AS TIMESTAMP)) as year_month , count(1) as total_comment FROM yt_comment_full group by year_month order by year_month asc;")
    st.write(top_like)

    st.markdown("---")

    comment_type = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏£‡∏ñ", ["BYD Atto3", "BYD Seal", "BYD Dolphin"])
    car_video_mapping = {"BYD Atto3": "OMV9F9zB4KU", "BYD Seal": "87lJCDADWCo", "BYD Dolphin": "CbkX7H-0BIU"}
    selected_video_id = car_video_mapping[comment_type]
    st.markdown("---")

    st.write("‡∏´‡∏°‡∏ß‡∏î ‡∏£‡∏≤‡∏Ñ‡∏≤")
    con = db.connect('./comment.duckdb')
    price = con.execute(f"""
    SELECT distinct comment                    
    FROM comment_data 
    WHERE video_id = '{selected_video_id}'
    and (comment like '%‡∏£‡∏≤‡∏Ñ‡∏≤%' or comment like '%‡∏ã‡∏∑‡πâ‡∏≠%' or comment like '%‡∏Ç‡∏≤‡∏¢%' or comment like '%‡∏ñ‡∏π‡∏Å%' or comment like '%‡πÅ‡∏û‡∏á%')
    limit 5; """).fetchdf()
    st.write(price)
    st.markdown("---")

    st.write("‡∏´‡∏°‡∏ß‡∏î ‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û")
    efficient = con.execute(f"""
    SELECT distinct comment                    
    FROM comment_data 
    WHERE video_id = '{selected_video_id}'
    and (comment like '%‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û%' or comment like '%‡∏≠‡∏∞‡πÑ‡∏´‡∏•‡πà%' or comment like '%‡∏û‡∏•‡∏±‡∏á‡∏á‡∏≤‡∏ô%' or comment like '%‡∏ñ‡∏µ‡πà%' or comment like '%‡∏ó‡∏ô%')
    limit 5; """).fetchdf()
    st.write(efficient)
    st.markdown("---")

    st.write("‡∏´‡∏°‡∏ß‡∏î ‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ")
    tech = con.execute(f"""
    SELECT distinct comment                    
    FROM comment_data 
    WHERE video_id = '{selected_video_id}'
    and (comment like '%‡∏õ‡∏•‡∏≠‡∏î%' or comment like '%‡∏£‡∏∞‡∏ö‡∏ö%' or comment like '%‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô%' or comment like '%‡∏ä‡∏≤‡∏£‡πå‡∏à%' or comment like '%‡πÅ‡∏ö‡∏ï%')
    limit 5; """).fetchdf()
    st.write(tech)
    st.markdown("---")

    st.write("‡∏´‡∏°‡∏ß‡∏î ‡∏£‡∏π‡∏õ‡∏£‡πà‡∏≤‡∏á")
    design = con.execute(f"""
    SELECT distinct comment                    
    FROM comment_data 
    WHERE video_id = '{selected_video_id}'
    and (comment like '%‡∏™‡∏ß‡∏¢%' or comment like '%‡∏™‡∏µ%' or comment like '%‡∏Ç‡πâ‡∏≤‡∏á‡πÉ‡∏ô%' or comment like '%‡∏´‡∏ô‡πâ‡∏≤%' or comment like '%‡∏î‡∏µ‡πÑ‡∏ã‡∏ô‡πå%')
    limit 5; """).fetchdf()
    st.write(design)


# --- Section 2 ---
elif option == "üß™ ML Modeling":
    st.markdown("[‡πÑ‡∏õ‡∏ó‡∏µ‡πà ML Modeling](https://projectdads5001-otbopsjs5ndt36ag2gtdm3.streamlit.app/ML_trial1)")


