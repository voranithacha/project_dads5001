import streamlit as st
import pandas as pd
import io
import json
from google import genai

from auth.user_auth import login_or_register  # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡∏•‡πä‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô

# === ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á ===
login_or_register()

if "logged_in" not in st.session_state:
    st.session_state["logged_in"] = False
if "username" not in st.session_state:
    st.session_state["username"] = ""

# === ‡∏´‡∏≤‡∏Å‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤ login/register ===
if not st.session_state["logged_in"]:
    st.title("üîê ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Ask AI")

    tab1, tab2 = st.tabs(["‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö", "‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å"])

    with tab1:
        username = st.text_input("Username", key="login_user")
        password = st.text_input("Password", type="password", key="login_pass")
        if st.button("‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö"):
            if login_user(username, password):
                st.session_state["logged_in"] = True
                st.session_state["username"] = username
                st.success("‚úÖ ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
                st.experimental_rerun()
            else:
                st.error("‚ùå Username ‡∏´‡∏£‡∏∑‡∏≠ Password ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")

    with tab2:
        new_user = st.text_input("‡∏ï‡∏±‡πâ‡∏á Username", key="reg_user")
        new_pass = st.text_input("‡∏ï‡∏±‡πâ‡∏á Password", type="password", key="reg_pass")
        if st.button("‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô"):
            if register_user(new_user, new_pass):
                st.success("‚úÖ ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡πÇ‡∏õ‡∏£‡∏î‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö")
            else:
                st.error("‚ö†Ô∏è Username ‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡πâ‡∏ß")

    st.stop()

# === ‡∏ñ‡πâ‡∏≤‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡πÅ‡∏•‡πâ‡∏ß ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á Ask AI ===
st.title("ü§ñ ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà Ask AI")
st.write(f"‡∏Ñ‡∏∏‡∏ì‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡πÉ‡∏ô‡∏ä‡∏∑‡πà‡∏≠: `{st.session_state['username']}`")

if st.button("‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö"):
    st.session_state["logged_in"] = False
    st.session_state["username"] = ""
    st.experimental_rerun()

# === ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ ‡πÅ‡∏•‡∏∞ Key ===
CSV_PATH = './data/youtube_comments_full.csv'
YOUTUBE_API_KEY = st.secrets["YOUTUBE_API_KEY"]
GEMINI_API_KEY = st.secrets["GEMINI_API_KEY"]
client = genai.Client(api_key=GEMINI_API_KEY)

# === ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢ ===
def convert_bytes_to_dataframe(byte_data, encoding='utf-8', **kwargs):
    try:
        string_data = byte_data.decode(encoding)
        data_io = io.StringIO(string_data)
        df = pd.read_csv(data_io, **kwargs)
        return df
    except UnicodeDecodeError as e:
        st.error(f"Decoding error: {e}")
        return None
    except pd.errors.EmptyDataError:
        st.error("Empty data error: The uploaded file is empty.")
        return None
    except Exception as e:
        st.error(f"An error occurred: {e}")
        return None

def format_dict_as_text(data_list):
    formatted_rows = ["\n".join([f"{k}: {v}" for k, v in row.items()]) for row in data_list]
    return "\n\n".join(formatted_rows)

def ask_gemini_about_data(client, model, df_dict, question):
    context_text = format_dict_as_text(df_dict[:50])  # ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• 50 records ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß
    prompt = (
        "You are a data analyst. Here's a sample of the data:\n\n"
        f"{context_text}\n\n"
        f"Now answer this question based on the data:\n{question}"
    )
    response = client.models.generate_content(
        model=model,
        contents=prompt
    )
    return response.text

# === Sidebar History ===
with st.sidebar:
    st.subheader("üìú Conversations History")
    if "qa_history" not in st.session_state:
        st.session_state.qa_history = []

    if st.session_state.qa_history:
        for i, item in enumerate(reversed(st.session_state.qa_history[-5:]), 1):
            st.markdown(f"**{i}. ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°:** {item['question']}")
            st.markdown(f"‚úçÔ∏è ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö: {item['answer'][:150]}...")
            st.markdown("---")
        if st.button("üóëÔ∏è Clear Conversations History"):
            st.session_state.qa_history = []
    else:
        st.info("No Conversations History")

# === ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏´‡∏•‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ===
st.subheader("üìä ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏´‡∏•‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô")

data_source = st.radio(
    "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏´‡∏•‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• CSV",
    ["üìÅ Default CSV (‡∏£‡∏∞‡∏ö‡∏ö)", "üì§ Upload CSV File ‡∏à‡∏≤‡∏Å‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á"]
)

df = None
df_dict = None

if data_source == "üìÅ Default CSV (‡∏£‡∏∞‡∏ö‡∏ö)":
    try:
        df = pd.read_csv(CSV_PATH)
        st.success(f"‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å `{CSV_PATH}` ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
        st.write(df)
        df_dict = df.to_dict(orient='records')
    except Exception as e:
        st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå: {e}")

elif data_source == "üì§ Upload CSV File ‡∏à‡∏≤‡∏Å‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á":
    uf_csv = st.file_uploader("üìÇ Upload CSV File", type=["csv"])
    if uf_csv is not None:
        bytes_data = uf_csv.getvalue()
        df = convert_bytes_to_dataframe(bytes_data, delimiter=',')
        if df is not None:
            st.success("‚úÖ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡∏∞‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå CSV ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
            st.write(df)
            df_dict = df.to_dict(orient='records')

# === ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡πÉ‡∏´‡πâ‡∏ñ‡∏≤‡∏° Gemini ‡πÑ‡∏î‡πâ ===
if df_dict:
    st.subheader("üß† Ask Questions about the Data")

    user_question = st.text_input("Enter your question:‚ùì")
    if st.button("Ask Gemini") and user_question:
        answer = ask_gemini_about_data(client, "gemini-2.0-flash", df_dict, user_question)
        st.write("üìå **Answer:**")
        st.success(answer)

        # Save to history
        st.session_state.qa_history.append({
            "question": user_question,
            "answer": answer
        })

    # === Export Options ===
    st.markdown("### üì§ Export Options")
    # CSV
    csv_data = pd.DataFrame(df_dict).to_csv(index=False)
    st.download_button(
        label="‚¨áÔ∏è Download CSV",
        data=csv_data,
        file_name="comments_data.csv",
        mime="text/csv"
    )

 
